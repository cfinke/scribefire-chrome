if (typeof Components != 'undefined') {
	var platform = "gecko";
	var browser = 'firefox';
}
else {
	var platform = "webkit";

	if (typeof chrome != 'undefined') {
		var browser = 'chrome';
	}
	else {
		var browser = 'safari';
	}
}

if (platform == 'gecko') {
	if (typeof console == 'undefined') {
		var console = {
			log : function (msg) {
				var consoleService = Components.classes["@mozilla.org/consoleservice;1"].getService(Components.interfaces.nsIConsoleService);
				consoleService.logStringMessage(msg);
			}
		};
	}
	
	var SCRIBEFIRE_MESSAGES = {};
	
	(function () {
		// @todo Make sure it works in FFx 4
		var extensionManager = Components.classes["@mozilla.org/extensions/manager;1"].getService(Components.interfaces.nsIExtensionManager);
		var extension_id = "next@scribefire.com";
		
		try {
			var defaultLocale = JSON.parse(FileIO.read(extensionManager.getInstallLocation(extension_id).getItemFile(extension_id, "chrome/content/manifest.json"))).default_locale;
		} catch (e) {
			var defaultLocale = "en_US";
		}
		
		// Get the user's Firefox locale.
		var userLocale = Components.classes["@mozilla.org/preferences-service;1"].getService(Components.interfaces.nsIPrefService).getBranch("general.useragent.").getCharPref("locale");
		
		// Convert the userLocale to Chrome style.
		var userLocaleParts = userLocale.split("-");
		if (userLocaleParts.length > 1) userLocaleParts[1] = userLocaleParts[1].toUpperCase();
		userLocale = userLocaleParts.join("_");
		
		var localeOrder = [defaultLocale];
		
		if (userLocale != defaultLocale) {
			if ((underscoreIndex = userLocale.indexOf("_")) != -1) localeOrder.push(userLocale.substr(0, underscoreIndex));
			localeOrder.push(userLocale);
		}
		
		// Starting with the default, pull in all of the strings for each locale, overwriting previous ones if necessary.
		localeOrder.forEach(function (locale) {
			var messagesFile = extensionManager.getInstallLocation(extension_id).getItemFile(extension_id, "chrome/content/_locales/" + locale + "/messages.json");
			var messagesText = FileIO.read(messagesFile);

			if (messagesText) {
				var messages = {};
				
				try {
					messages = JSON.parse(messagesText);
				} catch (e) {
					// Invalid JSON.
				}
				
				for (var i in messages) {
					SCRIBEFIRE_MESSAGES[i] = messages[i];
				}
			}
		});
	})();
}
else if (browser == 'safari') {
	// SCRIBEFIRE_MESSAGES is generated by the Safari build script.
}

function scribefire_string(key, substitutions) {
	if (browser == 'chrome') {
		return chrome.i18n.getMessage(key, substitutions);
	}
	else {
		if (key in SCRIBEFIRE_MESSAGES) {
			var bundle = SCRIBEFIRE_MESSAGES[key];
			
			var message = SCRIBEFIRE_MESSAGES[key].message;
			
			if ("placeholders" in bundle) {
				for (var i in bundle.placeholders) {
					var regex = new RegExp("\\$" + i + "\\$", "g");
					message = message.replace(regex, bundle.placeholders[i].content);
				}
			}
			
			if (typeof substitutions != 'undefined') {
				if (typeof substitutions != 'object') {
					substitutions = [ substitutions ];
				}
			}
			
			if (substitutions) {
				for (var i = 0, _len = substitutions.length; i < _len; i++) {
					var regex = new RegExp("\\$" + (i+1), "g");
					message = message.replace(regex, substitutions[i]);
				}
			}
			
			return message;
		}
		
		return "";
	}
}

document.documentElement.setAttribute("platform", platform);